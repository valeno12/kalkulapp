// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type SessionsStatus string

const (
	SessionsStatusActive SessionsStatus = "active"
	SessionsStatusClosed SessionsStatus = "closed"
)

func (e *SessionsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SessionsStatus(s)
	case string:
		*e = SessionsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for SessionsStatus: %T", src)
	}
	return nil
}

type NullSessionsStatus struct {
	SessionsStatus SessionsStatus
	Valid          bool // Valid is true if SessionsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSessionsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.SessionsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SessionsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSessionsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SessionsStatus), nil
}

type Debt struct {
	ID        int64
	SessionID int64
	FromUser  int64
	ToUser    int64
	Amount    string
}

type Expense struct {
	ID          int64
	SessionID   int64
	PaidBy      int64
	Amount      string
	Description string
	CreatedAt   sql.NullTime
}

type ExpenseShare struct {
	ID        int64
	ExpenseID int64
	UserID    int64
	Amount    string
}

type Session struct {
	ID              int64
	Name            string
	Code            string
	CreatedBy       int64
	MaxParticipants sql.NullInt32
	Status          SessionsStatus
	CreatedAt       sql.NullTime
}

type User struct {
	ID        int64
	SessionID int64
	Name      string
}
