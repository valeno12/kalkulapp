// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: session.sql

package db

import (
	"context"
	"database/sql"
)

const countUsersInSession = `-- name: CountUsersInSession :one
SELECT COUNT(*) FROM users WHERE session_id = ?
`

func (q *Queries) CountUsersInSession(ctx context.Context, sessionID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUsersInSession, sessionID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSession = `-- name: CreateSession :execresult
INSERT INTO sessions (name, code, created_by, max_participants, status) 
VALUES (?, ?, ?, ?, 'active')
`

type CreateSessionParams struct {
	Name            string
	Code            string
	CreatedBy       int64
	MaxParticipants sql.NullInt32
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createSession,
		arg.Name,
		arg.Code,
		arg.CreatedBy,
		arg.MaxParticipants,
	)
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (session_id, name) VALUES (?, ?)
`

type CreateUserParams struct {
	SessionID int64
	Name      string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.SessionID, arg.Name)
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getSessionByCode = `-- name: GetSessionByCode :one
SELECT id, name, code, created_by, max_participants, status 
FROM sessions WHERE code = ? LIMIT 1
`

type GetSessionByCodeRow struct {
	ID              int64
	Name            string
	Code            string
	CreatedBy       int64
	MaxParticipants sql.NullInt32
	Status          SessionsStatus
}

func (q *Queries) GetSessionByCode(ctx context.Context, code string) (GetSessionByCodeRow, error) {
	row := q.db.QueryRowContext(ctx, getSessionByCode, code)
	var i GetSessionByCodeRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.CreatedBy,
		&i.MaxParticipants,
		&i.Status,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, session_id, name FROM users WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(&i.ID, &i.SessionID, &i.Name)
	return i, err
}

const getUsersBySessionID = `-- name: GetUsersBySessionID :many
SELECT id, session_id, name FROM users WHERE session_id = ?
`

func (q *Queries) GetUsersBySessionID(ctx context.Context, sessionID int64) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersBySessionID, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.SessionID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSessionCreatedBy = `-- name: UpdateSessionCreatedBy :exec
UPDATE sessions
SET created_by = ?
WHERE id = ?
`

type UpdateSessionCreatedByParams struct {
	CreatedBy int64
	ID        int64
}

func (q *Queries) UpdateSessionCreatedBy(ctx context.Context, arg UpdateSessionCreatedByParams) error {
	_, err := q.db.ExecContext(ctx, updateSessionCreatedBy, arg.CreatedBy, arg.ID)
	return err
}
