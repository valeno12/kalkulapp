// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: session.sql

package db

import (
	"context"
	"database/sql"
)

const createSession = `-- name: CreateSession :execresult
INSERT INTO sessions (name, code, created_by, max_participants, status) 
VALUES (?, ?, ?, ?, 'active')
`

type CreateSessionParams struct {
	Name            string
	Code            string
	CreatedBy       int64
	MaxParticipants sql.NullInt32
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createSession,
		arg.Name,
		arg.Code,
		arg.CreatedBy,
		arg.MaxParticipants,
	)
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (session_id, name) VALUES (?, ?)
`

type CreateUserParams struct {
	SessionID int64
	Name      string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.SessionID, arg.Name)
}

const getSessionByCode = `-- name: GetSessionByCode :one
SELECT id, name, code, created_by, max_participants, status 
FROM sessions WHERE code = ? LIMIT 1
`

type GetSessionByCodeRow struct {
	ID              int64
	Name            string
	Code            string
	CreatedBy       int64
	MaxParticipants sql.NullInt32
	Status          SessionsStatus
}

func (q *Queries) GetSessionByCode(ctx context.Context, code string) (GetSessionByCodeRow, error) {
	row := q.db.QueryRowContext(ctx, getSessionByCode, code)
	var i GetSessionByCodeRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.CreatedBy,
		&i.MaxParticipants,
		&i.Status,
	)
	return i, err
}
